# -*- mode: python; -*-

Import("env")

env = env.Clone()

# GCC emits a warning on both v2 and v3 toolchains when compiling filesystem. 
# We should check if this is still needed when doing boost upgrades in the future.
if env.ToolchainIs('GCC'):
    env.AppendUnique(CXXFLAGS=['-Wno-overloaded-virtual'])

env.Library(
    target='boost_system', 
    source=[
        'libs/system/src/error_code.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/boost_assert_shim',
    ],
)

env.Library(
    target='boost_filesystem', 
    source=[
        'libs/filesystem/src/codecvt_error_category.cpp',
        'libs/filesystem/src/operations.cpp',
        'libs/filesystem/src/path.cpp',
        'libs/filesystem/src/path_traits.cpp',
        'libs/filesystem/src/portability.cpp',
        'libs/filesystem/src/unique_path.cpp',
        'libs/filesystem/src/utf8_codecvt_facet.cpp',
        'libs/filesystem/src/windows_file_codecvt.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/boost_assert_shim',
        'boost_system',
    ],
)

env.Library(
    target='boost_program_options', 
    source=[
        'libs/program_options/src/cmdline.cpp',
        'libs/program_options/src/config_file.cpp',
        'libs/program_options/src/convert.cpp',
        'libs/program_options/src/options_description.cpp',
        'libs/program_options/src/parsers.cpp',
        'libs/program_options/src/positional_options.cpp',
        'libs/program_options/src/split.cpp',
        'libs/program_options/src/utf8_codecvt_facet.cpp',
        'libs/program_options/src/value_semantic.cpp',
        'libs/program_options/src/variables_map.cpp',
        'libs/program_options/src/winmain.cpp',
    ],
    # Because `::environ` is resolved in `/usr/lib/crt1.o` on FreeBSD, this library needs to be
    # marked `incomplete` on FreeBSD.
    LIBDEPS_TAGS=[] if not env.TargetOSIs('freebsd') else [
        'illegal_cyclic_or_unresolved_dependencies_whitelisted',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/boost_assert_shim',
    ],
)

env.Library(
    target='boost_iostreams', 
    source=[
        'libs/iostreams/src/file_descriptor.cpp',
        'libs/iostreams/src/mapped_file.cpp',
        ],
        LIBDEPS=[
		    '$BUILD_DIR/mongo/boost_assert_shim',
            'boost_system',
        ])

thread_env = env.Clone()
if thread_env.TargetOSIs('windows'):
    thread_env.AppendUnique(CPPDEFINES=[
            'BOOST_THREAD_WIN32',
            'BOOST_THREAD_BUILD_LIB'
        ])
    thread_env.Library('boost_thread', [
                'libs/thread/src/win32/thread.cpp',
                'libs/thread/src/win32/tss_dll.cpp',
                'libs/thread/src/win32/tss_pe.cpp',
                'libs/thread/src/win32/thread_primitives.cpp',
                'libs/thread/src/future.cpp',
            ],
            LIBDEPS=[
			    '$BUILD_DIR/mongo/boost_assert_shim',
            ])
else:
    thread_env.AppendUnique(CPPDEFINES=[
            'BOOST_THREAD_PTHREAD',
            'BOOST_THREAD_BUILD_LIB'
        ])
    thread_env.Library('boost_thread', [
                'libs/thread/src/pthread/thread.cpp',
                'libs/thread/src/pthread/once.cpp',
                'libs/thread/src/future.cpp',
            ],
            LIBDEPS=[
			    '$BUILD_DIR/mongo/boost_assert_shim',
            ])

log_env = env.Clone()
log_env.AppendUnique(CPPDEFINES=[
        'BOOST_LOG_WITHOUT_SETTINGS_PARSERS',
        'BOOST_LOG_WITHOUT_DEFAULT_FACTORIES',
        'BOOST_LOG_USE_COMPILER_TLS',
        'BOOST_LOG_USE_STD_REGEX',
        'BOOST_LOG_WITHOUT_IPC',
    ])
if env.ToolchainIs('msvc'):
    log_env.AppendUnique(CCFLAGS=['/wd4828'])
log_env.Library('boost_log_setup', [
            'libs/log/src/setup/parser_utils.cpp',
            'libs/log/src/setup/init_from_stream.cpp',
            'libs/log/src/setup/init_from_settings.cpp',
            'libs/log/src/setup/settings_parser.cpp',
            'libs/log/src/setup/filter_parser.cpp',
            'libs/log/src/setup/formatter_parser.cpp',
            'libs/log/src/setup/default_filter_factory.cpp',
            'libs/log/src/setup/matches_relation_factory.cpp',
            'libs/log/src/setup/default_formatter_factory.cpp',
        ],
        LIBDEPS=[
		    '$BUILD_DIR/mongo/boost_assert_shim',
        ])

log_env.Library('boost_log', [
            'libs/log/src/attribute_name.cpp',
            'libs/log/src/attribute_set.cpp',
            'libs/log/src/attribute_value_set.cpp',
            'libs/log/src/code_conversion.cpp',
            'libs/log/src/core.cpp',
            'libs/log/src/record_ostream.cpp',
            'libs/log/src/severity_level.cpp',
            'libs/log/src/global_logger_storage.cpp',
            'libs/log/src/named_scope.cpp',
            'libs/log/src/process_name.cpp',
            'libs/log/src/process_id.cpp',
            'libs/log/src/thread_id.cpp',
            'libs/log/src/timer.cpp',
            'libs/log/src/exceptions.cpp',
            'libs/log/src/default_attribute_names.cpp',
            'libs/log/src/default_sink.cpp',
            'libs/log/src/text_ostream_backend.cpp',
            'libs/log/src/text_file_backend.cpp',
            'libs/log/src/text_multifile_backend.cpp',
            'libs/log/src/thread_specific.cpp',
            'libs/log/src/once_block.cpp',
            'libs/log/src/timestamp.cpp',
            'libs/log/src/threadsafe_queue.cpp',
            'libs/log/src/event.cpp',
            'libs/log/src/trivial.cpp',
            'libs/log/src/spirit_encoding.cpp',
            'libs/log/src/format_parser.cpp',
            'libs/log/src/date_time_format_parser.cpp',
            'libs/log/src/named_scope_format_parser.cpp',
            'libs/log/src/permissions.cpp',
            'libs/log/src/dump.cpp',
        ],
        LIBDEPS=[
		     '$BUILD_DIR/mongo/boost_assert_shim',
             'boost_thread',
             'boost_filesystem'
        ])
