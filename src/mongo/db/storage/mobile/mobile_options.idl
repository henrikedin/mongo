# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/storage/mobile/mobile_options.h"
    configs:
        section: 'Mobile Storage Engine options'
        source: [ cli, ini, yaml ]
        initializer:
            register: addMobileStorageOptionDefinitions
            store: storeMobileStorageOptionDefinitions

configs:
    # Mobile storage engine options
    "storage.mobile.durabilityLevel":
        description: >-
            How often you want fsync data to disk. This is a trade-off between
            durability guarantees and performance. This value maps directly to
            SQLite's synchronous PRAGMA. The default value is 1 or NORMAL
            durability, where it's possible to have a write rolled back if the
            device crashes or loses power (you are always safe from
            application crashes). If write guarantees are more important than
            performance, set this to 2 or 3. Conversely, if you are fine with
            somewhat ephemeral local data then you can set this to 0.
        arg_vartype: Int
        cpp_varname: 'embedded::mobileGlobalOptions.mobileDurabilityLevel'
        short_name: mobileDurabilityLevel
        default: 1
        validator: {gte: 0, lte: 3}

    "storage.mobile.cacheSizeKB":
        description: 'The size of the cache in kilobytes.'
        arg_vartype: Int
        cpp_varname: 'embedded::mobileGlobalOptions.mobileCacheSizeKB'
        short_name: mobileCacheSizeKB
        default: 10240
        validator: {gte: 0}

    "storage.mobile.mmapSizeKB":
        description: 'How much of the data can we memory map in kilobytes.'
        arg_vartype: Int
        cpp_varname: 'embedded::mobileGlobalOptions.mobileMmapSizeKB'
        short_name: mobileMmapSizeKB
        default: 51200
        validator: {gte: 0}

    "storage.mobile.journalSizeLimitKB":
        description: 'Limit the size of the WAL to this amount in kilobytes.'
        arg_vartype: Int
        cpp_varname: 'embedded::mobileGlobalOptions.mobileJournalSizeLimitKB'
        short_name: mobileJournalSizeLimitKB
        default: 5120
        validator: {gte: 0}

    "storage.mobile.vacuumFreePageRatio":
        description: 'Trigger vaccum if the free pages to total pages ratio is above the threshold.'
        arg_vartype: Double
        cpp_varname: 'embedded::mobileGlobalOptions.vacuumFreePageRatio'
        short_name: vacuumFreePageRatio
        default: 0.25
        validator: {gt: 0.0, lte: 1.0}

    "storage.mobile.vacuumFreeSizeMB":
        description: 'Trigger vaccum if the free space in megabytes is above the threshold.'
        arg_vartype: Int
        cpp_varname: 'embedded::mobileGlobalOptions.vacuumFreeSizeMB'
        short_name: vacuumFreeSizeMB
        default: 50
        validator: {gt: 0}

    "storage.mobile.vacuumCheckIntervalMinutes":
        description: 'Interval in minutes to check if vacuum needs to be triggered.'
        arg_vartype: Int
        cpp_varname: 'embedded::mobileGlobalOptions.vacuumCheckIntervalMinutes'
        short_name: vacuumCheckIntervalMinutes
        default: 10
        validator: {gt: 0}

